#!/bin/bash
set -eo pipefail

die() {
	echo -e "\033[0;31m$*\033[0m" >&2
	exit 1
}

confirm() {
	echo -e "\033[0;32m✓\033[0m $*"
}

display_help() {
	cat <<-EOF

  usage:
    gh changelog              Generate the changelog

  [options]
    -m, --milestone           Set a specific milestone
    -u, --unreleased          Set a version number for the unreleased changes
    -h, --help                Display the help information

	EOF
}

owner() {
	gh repo view --json owner -q .owner.login
}

repo() {
	gh repo view --json name -q .name
}

features() {
	gh search prs \
		--json author,url,closedAt,number,title \
		--owner "$(owner)" \
		--repo "$(repo)" \
		--limit 1000 \
		--merged \
		--milestone "$MILESTONE" \
		--label feature \
		--template '{{range .}}{{.closedAt}}	FEATURE	{{.number}}	{{.title}}	{{.author.login}}{{"\n"}}{{end}}'
}

issues() {
	gh search prs \
		--json author,url,closedAt,number,title \
		--owner "$(owner)" \
		--repo "$(repo)" \
		--limit 1000 \
		--merged \
		--milestone "$MILESTONE" \
		--label bug \
		--template '{{range .}}{{.closedAt}}	ISSUE	{{.number}}	{{.title}}	{{.author.login}}{{"\n"}}{{end}}'
}

labels() {
	TZ=UTC0 git tag \
		--list "$MILESTONE".'*' \
		--sort=-creatordate \
		--format='%(creatordate:format-local:%Y-%m-%dT%H:%M:%SZ)	TAG	%(refname:short)'
}

changelog() {
	start_spinner

	if [[ $MILESTONE == "" ]]; then
		MILESTONE=$(git rev-parse --abbrev-ref HEAD)
	fi

	local temp_file
	temp_file=$(mktemp "/tmp/gh-changelog.XXXXXX")
	chmod 644 "$temp_file"

	cat <<-EOF > "$temp_file"
	# Changelog

	This project adheres to [Semantic Versioning].

	EOF

	local features='' issues='' users='' prs='' tags='' url data
	url="https://github.com/$(owner)/$(repo)"
	data=$({ features; issues; labels; } | sort -r)

	if [[ $UNRELEASED == "" ]]; then
		echo "## [Unreleased]" >> "$temp_file"
	else
		echo "## [$UNRELEASED] ($(date +%F))" >> "$temp_file"
		tags="[$UNRELEASED]: $url/releases/tag/$UNRELEASED"
	fi

	while IFS=$'\t' read -r date type number title author; do
		if [[ $type == 'TAG' ]]; then
			if [[ $tags != "" ]]; then
				tags+=$'\n'
			fi

			tags+="[$number]: $url/releases/tag/$number"

			if [[ $features != "" ]]; then
				echo -e "\n**New features:**\n\n$features" >> "$temp_file"
			fi

			if [[ $issues != "" ]]; then
				echo -e "\n**Fixed issues:**\n\n$issues" >> "$temp_file"
			fi

			echo -e "\n## [$number] (${date:0:10})" >> "$temp_file"

			features=''
			issues=''
		else
			if [[ $users != "" ]]; then
				users+=$'\n'
			fi

			users+="[$author]: https://github.com/$author"

			if [[ $prs != "" ]]; then
				prs+=$'\n'
			fi

			prs+="[#$number]: $url/pull/$number"

			if [[ $type == 'FEATURE' ]]; then
				if [[ $features != "" ]]; then
					features+=$'\n'
				fi

				features+="- [#$number] $title ([$author])"
			elif [[ $type == 'ISSUE' ]]; then
				if [[ $issues != "" ]]; then
					issues+=$'\n'
				fi

				issues+="- [#$number] $title ([$author])"
			fi
		fi
	done <<< "$data"

	if [[ $features != "" ]]; then
		echo -e "\n**New features:**\n\n$features" >> "$temp_file"
	fi

	if [[ $issues != "" ]]; then
		echo -e "\n**Fixed issues:**\n\n$issues" >> "$temp_file"
	fi

	echo -e "\n[Semantic Versioning]: https://semver.org/spec/v2.0.0.html" >> "$temp_file"

	if [[ $tags != "" ]]; then
		echo "$tags" | sort -Vr >> "$temp_file"
	fi

	if [[ $users != "" ]]; then
		echo "$users" | awk '!u[$0]++' | sort -f >> "$temp_file"
	fi

	if [[ $prs != "" ]]; then
		echo "$prs" | sort -n -k1.3 >> "$temp_file"
	fi

	mv "$temp_file" ./CHANGELOG.md

	stop_spinner
	confirm "The CHANGELOG.md file has been updated."
}

MILESTONE=''
UNRELEASED=''

while (( "$#" )); do
	case "$1" in
		-h|--help)
			display_help
			exit 0
			;;
		-m|--milestone)
			if [[ $2 == "" || ${2:0:1} == "-" ]]; then
				die "No argument for $1 given."
			fi
			MILESTONE="$2"
			shift 2
			;;
		-u|--unreleased)
			if [[ $2 == "" || ${2:0:1} == "-" ]]; then
				die "No argument for $1 given."
			fi
			UNRELEASED="$2"
			shift 2
			;;
		-*)
			die "Unsupported flag: $1"
			;;
		*)
			die "Unknown argument: $1"
			;;
	esac
done

SPINNER=

start_spinner() {
    set +m
    { while : ; do for i in '⣾' '⣽' '⣻' '⢿' '⡿' '⣟' '⣯' '⣷' ; do echo -en "\b\033[36m$i\033[0m" ; sleep 0.1 ; done ; done & } 2>/dev/null
    SPINNER=$!
}

stop_spinner() {
    { kill -9 $SPINNER && wait; } 2>/dev/null
    set -m
    echo -en "\033[2K\r"
}

trap stop_spinner EXIT

changelog
exit 0
